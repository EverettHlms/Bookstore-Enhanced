/*
 * This Java source file was generated by the Gradle 'init' task.
 */
// Everett Holmes
// This project is a Bookstore Mangement System designed to handle inventory,
// process sales, and track revenue. It features a dynamic inventory loading from a file
// and a modular structure for managing products, pricing, and stock.
package bookstoreproject;

import bookstoreproject.inventory.*;
import bookstoreproject.io.*;
import bookstoreproject.product.ProductInfo;
import bookstoreproject.sales.*;
import java.util.ArrayList;
import java.util.HashMap;

public class App {
    public String makeAnnouncement() {
        return "Starting Project";
    }

    public static void main(String[] args) {
        System.out.println(new App().makeAnnouncement());
        // Initialize the Inventory and Sales classes
        InventoryMgnt inventory_mgnt = new InventoryMgnt();
        InventoryItem bookItem = InventoryItem.createInventoryItem(inventory_mgnt,"Book", 20, 14.0);
        InventoryItem penItem = InventoryItem.createInventoryItem(inventory_mgnt,"Pen", 20, 2.0);
        InventoryItem pencilItem = InventoryItem.createInventoryItem(inventory_mgnt,"Pencil", 20, 1.0);
        InventoryItem stationaryItem = InventoryItem.createInventoryItem(inventory_mgnt,"Stationary", 20, 4.0);

        ArrayList<ItemEntry> entries = ItemEntry.readEntriesFromFile("inventory_items.txt");
            
        for(ItemEntry entry : entries) {
            InventoryItem item = InventoryItem.createInventoryItem(inventory_mgnt, entry.getProduct(), entry.getQuantity(), entry.getPrice());
            System.out.println(item.getProductInfo().getProductInfoName() + " has been added to inventory.");
        }
    
        Sales sales = new Sales(inventory_mgnt);

          // Header
          System.out.printf("%-15s %-15s %-15s%n", "Product", "Availability", "Price");

          HashMap<String, ProductInfo> productInfoMap = inventory_mgnt.getProductInfoMap();
          // Display initial inventory and pricing for demonstration
          for(String product : productInfoMap.keySet()){
            ProductInfo productInfo = productInfoMap.get(product);
            InventoryItem item = inventory_mgnt.getItem(productInfo);
            String productName = productInfo.getProductInfoName();
            boolean availability = inventory_mgnt.isAvailable(item, 1);
            double price = item.getPricingInfo().getPrice();

            System.out.printf("%-15s %-15s %-15.2f%n ", productName, availability, price);
          }
          // Perform some sales transactions and show results
          System.out.println("\nSales Transactions:");
          String Book = "Book";
          String Pencil = "Pencil";
          String Stationary = "Stationary";
          String StarTrek = "StarTrek";
          String Flashlight = "Flashlight";

          boolean bookSale = false;
          boolean pencilSale = false;
          boolean stationarySale = false;
          boolean startrekSale = false;
          boolean flashlightSale = false;

          ProductInfo bookInfo = productInfoMap.get(Book);
          if(bookInfo != null){
            bookSale = sales.makeSale(inventory_mgnt.getItem(bookInfo), 2);
            System.out.printf("Sold 2 %s: %-5s%n", Book, bookSale);
          }else{
            System.out.printf("Item not found in inventory: %s%n", Book);
          }

          ProductInfo pencilInfo = productInfoMap.get(Pencil);
          if(pencilInfo != null){
            pencilSale = sales.makeSale(inventory_mgnt.getItem(pencilInfo), 5);
            System.out.printf("Sold 5 %s: %-5s%n", Pencil, pencilSale);
          }else{
            System.out.printf("Item not found in inventory: %s%n", Pencil);
          }

          ProductInfo stationaryInfo = productInfoMap.get(Stationary);
          if(stationaryInfo != null){
            stationarySale = sales.makeSale(inventory_mgnt.getItem(stationaryInfo), 3);
            System.out.printf("Sold 3 %s: %-5s%n", Stationary, stationarySale);
          }else{
            System.out.printf("Item not found in inventory: %s%n", Stationary);
          }

          ProductInfo startrekInfo = productInfoMap.get(StarTrek);
          if(startrekInfo != null){
            startrekSale = sales.makeSale(inventory_mgnt.getItem(startrekInfo), 1);
            System.out.printf("Sold 1 %s: %-5s%n", StarTrek, startrekSale);
          }else{
            System.out.printf("Item not found in inventory: %s%n", StarTrek);
          }

          ProductInfo flashlightInfo = productInfoMap.get(Flashlight);
          if(flashlightInfo != null){
            flashlightSale = sales.makeSale(inventory_mgnt.getItem(flashlightInfo), 1);
            System.out.printf("Sold 1 %s: %-5s%n", Flashlight, flashlightSale);
          }else{
            System.out.printf("Sold 1 %s: %-5s%n", Flashlight, flashlightSale);
            System.out.printf("This item is not in inventory: %s%n", Flashlight);
          }
          

  
          // Display class name using Reflection for demonstration
          System.out.printf("\nClass of Sales object: %s%n", sales.getClass().getSimpleName());
  
          // If there's a static SalesCounter class to track total sales
          // System.out.printf("Total Sales: %d%n", SalesCounter.totalSales);
  
          // Exit the program
          System.out.println("\nExiting the program.");
    }
}
